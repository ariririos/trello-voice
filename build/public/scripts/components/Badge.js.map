{"version":3,"sources":["components/Badge.jsx"],"names":["BadgeModel","colorizeBadge","badge","type","i","data","items","item","done","length","date","oneDayBefore","clone","subtract","now","moment","isBetween","isAfter","Badge","props","badgeText","format","classNames","propTypes","PropTypes","instanceOf","isRequired"],"mappings":"AAAA;AACA,OAAOA,UAAP,MAAuB,oBAAvB;;AAEA;;;;;;AAMA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC1B,QAAIA,MAAMC,IAAN,KAAe,WAAnB,EAAgC;AAC5B,YAAIC,IAAI,CAAR;AAD4B;AAAA;AAAA;;AAAA;AAE5B,iCAAmBF,MAAMG,IAAN,CAAWC,KAA9B,8HAAqC;AAAA,oBAA1BC,IAA0B;;AACjC,oBAAIA,KAAKC,IAAT,EAAeJ;AAClB;AAJ2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAK5B,YAAIA,MAAMF,MAAMG,IAAN,CAAWC,KAAX,CAAiBG,MAA3B,EAAmC;AAC/B,mBAAO,UAAP;AACH,SAFD,MAGK,IAAIL,IAAK,MAAMF,MAAMG,IAAN,CAAWC,KAAX,CAAiBG,MAAhC,EAAyC;AAC1C,mBAAO,cAAP;AACH,SAFI,MAGA;AACD,mBAAO,YAAP;AACH;AACJ;AACD,QAAIP,MAAMC,IAAN,KAAe,SAAnB,EAA8B;AAC1B,YAAID,MAAMG,IAAN,CAAWG,IAAf,EAAqB;AACjB,mBAAO,UAAP;AACH,SAFD,MAGK;AAAA,gBACOE,IADP,GACgBR,MAAMG,IADtB,CACOK,IADP;;AAED,gBAAMC,eAAeD,KAAKE,KAAL,GAAaC,QAAb,CAAsB,CAAtB,EAAyB,MAAzB,CAArB;AACA,gBAAMC,MAAMC,QAAZ;AACA,gBAAID,IAAIE,SAAJ,CAAcL,YAAd,EAA4BD,IAA5B,CAAJ,EAAuC;AACnC,uBAAO,UAAP;AACH,aAFD,MAGK,IAAII,IAAIG,OAAJ,CAAYP,IAAZ,CAAJ,EAAuB;AACxB,uBAAO,QAAP;AACH;AACJ;AACJ;AACD,WAAO,EAAP;AACH;;AAED,eAAe,SAASQ,KAAT,CAAeC,KAAf,EAAsB;AAAA,QACzBjB,KADyB,GACfiB,KADe,CACzBjB,KADyB;;AAEjC,QAAIkB,YAAY,EAAhB;AACA,QAAIlB,MAAMC,IAAN,KAAe,WAAnB,EAAgC;AAC5B,YAAIC,IAAI,CAAR;AAD4B;AAAA;AAAA;;AAAA;AAE5B,kCAAmBF,MAAMG,IAAN,CAAWC,KAA9B,mIAAqC;AAAA,oBAA1BC,IAA0B;;AACjC,oBAAIA,KAAKC,IAAT,EAAeJ;AAClB;AAJ2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAK5BgB,oBAAehB,CAAf,SAAoBF,MAAMG,IAAN,CAAWC,KAAX,CAAiBG,MAArC;AACH;AACD,QAAIP,MAAMC,IAAN,KAAe,SAAnB,EAA8B;AAC1BiB,oBAAYlB,MAAMG,IAAN,CAAWK,IAAX,CAAgBW,MAAhB,CAAuB,QAAvB,CAAZ;AACH;;AAED,QAAMC,wBAAsBpB,MAAMC,IAA5B,SAAoCF,cAAcC,KAAd,CAA1C;;AAEA,WACI;AAAA;AAAA,UAAM,WAAWoB,UAAjB;AACKF;AADL,KADJ;AAKH;AACDF,MAAMK,SAAN,GAAkB;AACdrB,WAAOsB,UAAUC,UAAV,CAAqBzB,UAArB,EAAiC0B,UAD1B,CACqC;AADrC,CAAlB","file":"Badge.js","sourcesContent":["/* globals React, PropTypes, moment */\nimport BadgeModel from '../models/Badge.js';\n\n/**\n * Takes a badge and returns an appropriate class\n * based on the type and data.\n * @param {Badge} badge\n * @return {String}\n */\nfunction colorizeBadge(badge) {\n    if (badge.type === 'checklist') {\n        let i = 0;\n        for (const item of badge.data.items) {\n            if (item.done) i++;\n        }\n        if (i === badge.data.items.length) {\n            return 'complete';\n        }\n        else if (i > (0.5 * badge.data.items.length)) {\n            return 'intermediate';\n        }\n        else {\n            return 'incomplete';\n        }\n    }\n    if (badge.type === 'dueDate') {\n        if (badge.data.done) {\n            return 'complete';\n        }\n        else {\n            const { date } = badge.data;\n            const oneDayBefore = date.clone().subtract(1, 'days');\n            const now = moment();\n            if (now.isBetween(oneDayBefore, date)) {\n                return 'upcoming';\n            }\n            else if (now.isAfter(date)) {\n                return 'passed';\n            }\n        }\n    }\n    return '';\n}\n\nexport default function Badge(props) {\n    const { badge } = props;\n    let badgeText = '';\n    if (badge.type === 'checklist') {\n        let i = 0;\n        for (const item of badge.data.items) {\n            if (item.done) i++;\n        }\n        badgeText = `${i}/${badge.data.items.length}`;\n    }\n    if (badge.type === 'dueDate') {\n        badgeText = badge.data.date.format('MMM Do');\n    }\n\n    const classNames = `badge ${badge.type} ${colorizeBadge(badge)}`;\n\n    return (\n        <span className={classNames}>\n            {badgeText}\n        </span>\n    );\n}\nBadge.propTypes = {\n    badge: PropTypes.instanceOf(BadgeModel).isRequired // TODO: Flow\n};\n"]}