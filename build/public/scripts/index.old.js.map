{"version":3,"sources":["index.old.js"],"names":["Badge","type","data","validateType","_type","Error","validateData","_data","dataObj","name","items","item","text","done","date","typeStr","validTypes","includes","BadgeNode","badge","node","document","createElement","classList","add","dataset","badgeType","badgeText","i","length","format","innerText","_badge","oneDayBefore","clone","subtract","now","moment","isBetween","isAfter","Label","color","_name","_color","nameStr","colorStr","LabelNode","label","_label","labelsStyleElem","head","appendChild","labelsStylesheet","sheet","registerLabel","styleRule","insertRule","defaultLabelsList","Models","forEach","Card","badges","labels","_text","_badges","concat","_labels","badgesList","labelsList","textStr","CardNode","card","labelsCon","labelNode","createTextNode","badgesCon","badgeNode","_card","querySelector","innerHTML","colorize","badge1","badge2","label1","label2","cardNode","colorizeBadges","newCardTemplate","getElementById","onclick","ev","target","parentElement","value","parentNode","clear","possibleMatchesGlobal","handleLabelDisplay","console","log","labelName","split","possibleMatches","filter","labelFrag","substr","map","match","labelNodes","style","backgroundColor","possibleLabelDisplay","handleLabelEntry","which","preventDefault","labelNames","addLabels","textareaContent","removeEventListener","currentlyProcessingDate","handleDateDisplay","dateStr","handleDateEntry","dateBadge","dateNode","addBadges","remove","addEventListener","key","textLength","substring"],"mappings":";;;;AAAA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;AAGA;;;IAGMA,K;AACF;;;;;;;;;;;;;;;;;;;;;AAqBA,mBAAYC,IAAZ,EAAkBC,IAAlB,EAAwB;AAAA;;AACpB,YAAI,KAAKC,YAAL,CAAkBF,IAAlB,CAAJ,EAA6B;AACzB,iBAAKG,KAAL,GAAaH,IAAb;AACH,SAFD,MAGK;AACD,kBAAM,IAAII,KAAJ,CAAU,0CAAV,CAAN;AACH;AACD,YAAI,KAAKC,YAAL,CAAkBJ,IAAlB,CAAJ,EAA6B;AACzB,iBAAKK,KAAL,GAAaL,IAAb;AACH,SAFD,MAGK;AACD,kBAAM,IAAIG,KAAJ,CAAU,0CAAV,CAAN;AACH;AACJ;;;;qCACYG,O,EAAS;AAClB,gBAAI,KAAKP,IAAL,KAAc,WAAlB,EAA+B;AAC3B,oBAAIO,QAAQC,IAAR,IAAgBD,QAAQE,KAA5B,EAAmC;AAAA;AAAA;AAAA;;AAAA;AAC/B,6CAAmBF,QAAQE,KAA3B,8HAAkC;AAAA,gCAAvBC,IAAuB;;AAC9B,gCAAI,CAACA,KAAKC,IAAN,IAAc,EAAE,OAAOD,KAAKE,IAAZ,KAAqB,SAAvB,CAAlB,EAAqD;AACjD,uCAAO,KAAP;AACH;AACJ;AAL8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAM/B,2BAAO,IAAP;AACH;AACJ;AACD,gBAAI,KAAKZ,IAAL,KAAc,SAAlB,EAA6B;AACzB,uBAAOO,QAAQM,IAAR,IAAiB,OAAON,QAAQK,IAAf,KAAwB,SAAhD;AACH;AACD;AACA,mBAAO,KAAP;AACH;;;qCACYE,O,EAAS;AAClB,gBAAMC,aAAa,CAAC,WAAD,EAAc,SAAd,CAAnB;AACA,mBAAOA,WAAWC,QAAX,CAAoBF,OAApB,CAAP;AACH;;;4BACU;AACP,mBAAO,KAAKX,KAAZ;AACH,S;0BACQW,O,EAAS;AACd,gBAAI,KAAKZ,YAAL,CAAkBY,OAAlB,CAAJ,EAAgC;AAC5B,qBAAKX,KAAL,GAAaW,OAAb;AACH,aAFD,MAGK;AACD,sBAAM,IAAIV,KAAJ,CAAU,0CAAV,CAAN;AACH;AACJ;;;4BACU;AACP,mBAAO,KAAKE,KAAZ;AACH;AACD;;0BACSC,O,EAAS;AACd,gBAAI,KAAKF,YAAL,CAAkBE,OAAlB,CAAJ,EAAgC;AAC5B,qBAAKD,KAAL,GAAaC,OAAb;AACH,aAFD,MAGK;AACD,sBAAM,IAAIH,KAAJ,CAAU,0CAAV,CAAN;AACH;AACJ;;;;;;IAGCa,S;AACF,uBAAYC,KAAZ,EAAmB;AAAA;;AACf,aAAKC,IAAL,GAAYC,SAASC,aAAT,CAAuB,MAAvB,CAAZ;AACA,aAAKF,IAAL,CAAUG,SAAV,CAAoBC,GAApB,CAAwB,OAAxB;AACA,aAAKJ,IAAL,CAAUK,OAAV,CAAkBC,SAAlB,GAA8BP,MAAMlB,IAApC;;AAEA,YAAI0B,YAAY,EAAhB;AACA,YAAIR,MAAMlB,IAAN,KAAe,WAAnB,EAAgC;AAC5B,gBAAI2B,IAAI,CAAR;AAD4B;AAAA;AAAA;;AAAA;AAE5B,sCAAmBT,MAAMjB,IAAN,CAAWQ,KAA9B,mIAAqC;AAAA,wBAA1BC,IAA0B;;AACjC,wBAAIA,KAAKE,IAAT,EAAee;AAClB;AAJ2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAK5BD,wBAAeC,CAAf,SAAoBT,MAAMjB,IAAN,CAAWQ,KAAX,CAAiBmB,MAArC;AACH;AACD,YAAIV,MAAMlB,IAAN,KAAe,SAAnB,EAA8B;AAC1B0B,wBAAYR,MAAMjB,IAAN,CAAWY,IAAX,CAAgBgB,MAAhB,CAAuB,QAAvB,CAAZ;AACH;AACD,aAAKV,IAAL,CAAUW,SAAV,GAAsBJ,SAAtB;AACA,aAAKK,MAAL,GAAcb,KAAd;AACH;;;;mCACU;AACP,gBAAI,KAAKa,MAAL,CAAY/B,IAAZ,KAAqB,WAAzB,EAAsC;AAClC,oBAAI2B,IAAI,CAAR;AADkC;AAAA;AAAA;;AAAA;AAElC,0CAAmB,KAAKI,MAAL,CAAY9B,IAAZ,CAAiBQ,KAApC,mIAA2C;AAAA,4BAAhCC,IAAgC;;AACvC,4BAAIA,KAAKE,IAAT,EAAee;AAClB;AAJiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKlC,oBAAIA,MAAM,KAAKI,MAAL,CAAY9B,IAAZ,CAAiBQ,KAAjB,CAAuBmB,MAAjC,EAAyC;AACrC,yBAAKT,IAAL,CAAUG,SAAV,CAAoBC,GAApB,CAAwB,UAAxB;AACH,iBAFD,MAGK,IAAII,IAAK,MAAM,KAAKI,MAAL,CAAY9B,IAAZ,CAAiBQ,KAAjB,CAAuBmB,MAAtC,EAA+C;AAChD,yBAAKT,IAAL,CAAUG,SAAV,CAAoBC,GAApB,CAAwB,cAAxB;AACH,iBAFI,MAGA;AACD,yBAAKJ,IAAL,CAAUG,SAAV,CAAoBC,GAApB,CAAwB,YAAxB;AACH;AACJ;AACD,gBAAI,KAAKQ,MAAL,CAAY/B,IAAZ,KAAqB,SAAzB,EAAoC;AAChC,oBAAI,KAAK+B,MAAL,CAAY9B,IAAZ,CAAiBW,IAArB,EAA2B;AACvB,yBAAKO,IAAL,CAAUG,SAAV,CAAoBC,GAApB,CAAwB,UAAxB;AACH,iBAFD,MAGK;AAAA,wBACOV,IADP,GACgB,KAAKkB,MAAL,CAAY9B,IAD5B,CACOY,IADP;;AAED,wBAAMmB,eAAenB,KAAKoB,KAAL,GAAaC,QAAb,CAAsB,CAAtB,EAAyB,MAAzB,CAArB;AACA,wBAAMC,MAAMC,QAAZ;AACA,wBAAID,IAAIE,SAAJ,CAAcL,YAAd,EAA4BnB,IAA5B,CAAJ,EAAuC;AACnC,6BAAKM,IAAL,CAAUG,SAAV,CAAoBC,GAApB,CAAwB,UAAxB;AACH,qBAFD,MAGK,IAAIY,IAAIG,OAAJ,CAAYzB,IAAZ,CAAJ,EAAuB;AACxB,6BAAKM,IAAL,CAAUG,SAAV,CAAoBC,GAApB,CAAwB,QAAxB;AACH;AACJ;AACJ;AACJ;;;;;;IAGCgB,K;AACF,mBAAY/B,IAAZ,EAAkBgC,KAAlB,EAAyB;AAAA;;AACrB,aAAKC,KAAL,GAAajC,IAAb;AACA,aAAKkC,MAAL,GAAcF,KAAd;AACH;;;;4BACU;AACP,mBAAO,KAAKC,KAAZ;AACH;AACD;;0BACSE,O,EAAS;AACd,iBAAKF,KAAL,GAAaE,OAAb;AACH;AACD;;;;4BACY;AACR,mBAAO,KAAKD,MAAZ;AACH,S;0BACSE,Q,EAAU;AAChB,iBAAKF,MAAL,GAAcE,QAAd;AACH;;;;;;IAGCC,S,GACF,mBAAYC,KAAZ,EAAmB;AAAA;;AACf,SAAK3B,IAAL,GAAYC,SAASC,aAAT,CAAuB,MAAvB,CAAZ;AACA,SAAKF,IAAL,CAAUG,SAAV,CAAoBC,GAApB,CAAwB,OAAxB;AACA,SAAKJ,IAAL,CAAUK,OAAV,CAAkBsB,KAAlB,GAA0BA,MAAMtC,IAAhC;AACA,SAAKuC,MAAL,GAAcD,KAAd;AACH,C;;AAGL;;;AACA,IAAME,kBAAkB5B,SAASC,aAAT,CAAuB,OAAvB,CAAxB;AACAD,SAAS6B,IAAT,CAAcC,WAAd,CAA0BF,eAA1B;AACA,IAAMG,mBAAmBH,gBAAgBI,KAAzC;;AAEA;;;;;AAKA,SAASC,aAAT,CAAuBP,KAAvB,EAA8B;AAC1B,QAAMQ,4CACiBR,MAAMtC,IADvB,0CAEoBsC,MAAMN,KAF1B,uBAAN;AAKAW,qBAAiBI,UAAjB,CAA4BD,SAA5B,EAAuC,CAAvC;AACH;;AAED,IAAME,oBAAoB,CACtB,IAAIC,OAAOlB,KAAX,CAAiB,SAAjB,EAA4B,MAA5B,CADsB,EAEtB,IAAIkB,OAAOlB,KAAX,CAAiB,WAAjB,EAA8B,QAA9B,CAFsB,EAGtB,IAAIkB,OAAOlB,KAAX,CAAiB,WAAjB,EAA8B,KAA9B,CAHsB,EAItB,IAAIkB,OAAOlB,KAAX,CAAiB,QAAjB,EAA2B,WAA3B,CAJsB,EAKtB,IAAIkB,OAAOlB,KAAX,CAAiB,UAAjB,EAA6B,YAA7B,CALsB,CAA1B;;AAQAiB,kBAAkBE,OAAlB,CAA0BL,aAA1B;;IAEMM,I;AACF,kBAAYhD,IAAZ,EAAkBiD,MAAlB,EAA0BC,MAA1B,EAAkC;AAAA;;AAC9B,aAAKC,KAAL,GAAanD,QAAQ,EAArB;AACA,aAAKoD,OAAL,GAAe,GAAGC,MAAH,CAAUJ,UAAU,EAApB,CAAf;AACA,aAAKK,OAAL,GAAe,GAAGD,MAAH,CAAUH,UAAU,EAApB,CAAf;AACH;;;;kCAcSK,U,EAAY;AAClB,iBAAKH,OAAL,GAAe,KAAKA,OAAL,CAAaC,MAAb,CAAoBE,cAAc,EAAlC,CAAf;AACH;;;qCACYA,U,EAAY,CAAE;AAC3B;AACC;;;;AAOD;kCACUC,U,EAAY;AAClB,iBAAKF,OAAL,GAAe,KAAKA,OAAL,CAAaD,MAAb,CAAoBG,cAAc,EAAlC,CAAf;AACH;;;qCACYA,U,EAAY,CAAE;AAC3B;AACC;;;gCACO;AACJ,iBAAKxD,IAAL,GAAY,EAAZ;AACA,iBAAKiD,MAAL,GAAc,EAAd;AACA,iBAAKC,MAAL,GAAc,EAAd;AACH;;;4BApCU;AACP,mBAAO,KAAKC,KAAZ;AACH;AACD;;0BACSM,O,EAAS;AACd,iBAAKN,KAAL,GAAaM,OAAb;AACH;;;4BACY;AACT,mBAAO,KAAKL,OAAZ;AACH,S;0BACUG,U,EAAY;AACnB,iBAAKH,OAAL,GAAe,GAAGC,MAAH,CAAUE,cAAc,EAAxB,CAAf;AACH;;;4BAOY;AACT,mBAAO,KAAKD,OAAZ;AACH,S;0BACUE,U,EAAY;AACnB,iBAAKF,OAAL,GAAe,GAAGD,MAAH,CAAUG,cAAc,EAAxB,CAAf;AACH;;;;;;AAeL;;;IACME,Q;AACF,sBAAYC,IAAZ,EAAkB;AAAA;;AACd,aAAKnD,IAAL,GAAYC,SAASC,aAAT,CAAuB,KAAvB,CAAZ;AACA,aAAKF,IAAL,CAAUG,SAAV,CAAoBC,GAApB,CAAwB,MAAxB;;AAEA,YAAMgD,YAAYnD,SAASC,aAAT,CAAuB,KAAvB,CAAlB;AACAkD,kBAAUjD,SAAV,CAAoBC,GAApB,CAAwB,QAAxB;;AALc;AAAA;AAAA;;AAAA;AAOd,kCAAoB+C,KAAKT,MAAzB,mIAAiC;AAAA,oBAAtBf,KAAsB;;AAC7B,oBAAM0B,YAAY,IAAI3B,SAAJ,CAAcC,KAAd,CAAlB;AACAyB,0BAAUrB,WAAV,CAAsBsB,UAAUrD,IAAhC;AACH;AAVa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYd,aAAKA,IAAL,CAAU+B,WAAV,CAAsBqB,SAAtB;;AAEA,aAAKpD,IAAL,CAAU+B,WAAV,CAAsB9B,SAASqD,cAAT,CAAwBH,KAAK3D,IAA7B,CAAtB;;AAEA,YAAM+D,YAAYtD,SAASC,aAAT,CAAuB,KAAvB,CAAlB;AACAqD,kBAAUpD,SAAV,CAAoBC,GAApB,CAAwB,QAAxB;;AAjBc;AAAA;AAAA;;AAAA;AAmBd,kCAAoB+C,KAAKV,MAAzB,mIAAiC;AAAA,oBAAtB1C,KAAsB;;AAC7B,oBAAMyD,YAAY,IAAI1D,SAAJ,CAAcC,KAAd,CAAlB;AACAwD,0BAAUxB,WAAV,CAAsByB,UAAUxD,IAAhC;AACH;AAtBa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAwBd,aAAKA,IAAL,CAAU+B,WAAV,CAAsBwB,SAAtB;AACA,aAAKE,KAAL,GAAaN,IAAb;AACH;;;;yCACgB;AACb,gBAAMI,YAAY,KAAKvD,IAAL,CAAU0D,aAAV,CAAwB,SAAxB,CAAlB;AACAH,sBAAUI,SAAV,GAAsB,EAAtB;;AAFa;AAAA;AAAA;;AAAA;AAIb,sCAAoB,KAAKF,KAAL,CAAWhB,MAA/B,mIAAuC;AAAA,wBAA5B1C,KAA4B;;AACnC,wBAAMyD,YAAY,IAAI1D,SAAJ,CAAcC,KAAd,CAAlB;AACAyD,8BAAUI,QAAV;AACAL,8BAAUxB,WAAV,CAAsByB,UAAUxD,IAAhC;AACH;AARY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAShB;;;;;;AAGL,IAAM6D,SAAS,IAAIvB,OAAO1D,KAAX,CAAiB,SAAjB,EAA4B;AACvCc,UAAMuB,OAAO,qBAAP,EAA8B,kBAA9B,CADiC;AAEvCxB,UAAM;AAFiC,CAA5B,CAAf;AAIA,IAAMqE,SAAS,IAAIxB,OAAO1D,KAAX,CAAiB,WAAjB,EAA8B;AACzCS,UAAM,aADmC;AAEzCC,WAAO,CAAC;AACJE,cAAM,MADF;AAEJC,cAAM;AAFF,KAAD,EAIP;AACID,cAAM,MADV;AAEIC,cAAM;AAFV,KAJO,EAQP;AACID,cAAM,MADV;AAEIC,cAAM;AAFV,KARO;AAFkC,CAA9B,CAAf;AAeA,IAAMsE,SAAS,IAAIzB,OAAOlB,KAAX,CAAiB,SAAjB,EAA4B,MAA5B,CAAf;AACA,IAAM4C,SAAS,IAAI1B,OAAOlB,KAAX,CAAiB,WAAjB,EAA8B,KAA9B,CAAf;AACA,IAAM+B,OAAO,IAAIX,IAAJ,CAAS,WAAT,EAAsB,CAACqB,MAAD,EAASC,MAAT,CAAtB,EAAwC,CAACC,MAAD,EAASC,MAAT,CAAxC,CAAb;AACA,IAAMC,WAAW,IAAIf,QAAJ,CAAaC,IAAb,CAAjB;AACAc,SAASC,cAAT;AACAjE,SAASyD,aAAT,CAAuB,WAAvB,EAAoC3B,WAApC,CAAgDkC,SAASjE,IAAzD;;AAEA,IAAMmE,kBAAkB,IAAI3B,IAAJ,EAAxB;;AAEAvC,SAASmE,cAAT,CAAwB,YAAxB,EAAsCV,aAAtC,CAAoD,sBAApD,EAA4EW,OAA5E,GAAsF,UAACC,EAAD,EAAQ;AAC1FH,oBAAgB3E,IAAhB,GAAuB8E,GAAGC,MAAH,CAAUC,aAAV,CAAwBd,aAAxB,CAAsC,UAAtC,EAAkDe,KAAzE;AACA;AACAH,OAAGC,MAAH,CAAUG,UAAV,CAAqBhB,aAArB,CAAmC,SAAnC,EAA8CC,SAA9C,GAA0D,EAA1D;AACAW,OAAGC,MAAH,CAAUG,UAAV,CAAqBhB,aAArB,CAAmC,SAAnC,EAA8CC,SAA9C,GAA0D,EAA1D;AACAW,OAAGC,MAAH,CAAUG,UAAV,CAAqBhB,aAArB,CAAmC,UAAnC,EAA+Ce,KAA/C,GAAuD,EAAvD;;AAEA;AACAxE,aAASyD,aAAT,CAAuB,WAAvB,EAAoC3B,WAApC,CAAgD,IAAImB,QAAJ,CAAaiB,eAAb,EAA8BnE,IAA9E;AACAmE,oBAAgBQ,KAAhB;AACH,CAVD;;AAYA,IAAIC,wBAAwB,EAA5B;;AAEA,SAASC,kBAAT,CAA4BP,EAA5B,EAAgC;AAC5BQ,YAAQC,GAAR,CAAY,oBAAZ,EAD4B,CACO;AACnC;AACA,QAAMC,YAAYV,GAAGC,MAAH,CAAUE,KAAV,CAAgBQ,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAlB;AACA,QAAMC,kBAAkB7C,kBAAkB8C,MAAlB,CAAyB,UAACxD,KAAD,EAAW;AACxD,YAAMyD,YAAYzD,MAAMtC,IAAN,CAAWgG,MAAX,CAAkB,CAAlB,EAAqBL,UAAUvE,MAA/B,CAAlB;AACA,eAAO2E,cAAcJ,SAArB;AACH,KAHuB,CAAxB;AAIAJ,4BAAwBM,eAAxB;AACAJ,YAAQC,GAAR,CAAYG,gBAAgBI,GAAhB,CAAoB;AAAA,eAASC,MAAMlG,IAAf;AAAA,KAApB,CAAZ,EAT4B,CAS2B;AACvD,QAAMmG,aAAaN,gBAAgBI,GAAhB,CAAoB,UAAC3D,KAAD,EAAW;AAC9C,YAAM3B,OAAOC,SAASC,aAAT,CAAuB,KAAvB,CAAb;AACAF,aAAKG,SAAL,CAAeC,GAAf,CAAmB,eAAnB;AACAJ,aAAKW,SAAL,GAAiBgB,MAAMtC,IAAvB;AACAW,aAAKyF,KAAL,CAAWC,eAAX,GAA6B/D,MAAMN,KAAnC;AACA,eAAOrB,IAAP;AACH,KANkB,CAAnB;AAOA8E,YAAQC,GAAR,CAAYS,UAAZ,EAjB4B,CAiBH;AACzB,QAAMG,uBAAuB1F,SAASyD,aAAT,CAAuB,uBAAvB,CAA7B;AACAiC,yBAAqBhC,SAArB,GAAiC,EAAjC;AACA6B,eAAWjD,OAAX,CAAmB;AAAA,eAAaoD,qBAAqB5D,WAArB,CAAiCsB,SAAjC,CAAb;AAAA,KAAnB;AACH;;AAED,SAASuC,gBAAT,CAA0BtB,EAA1B,EAA8B;AAC1BQ,YAAQC,GAAR,CAAY,kBAAZ,EAD0B,CACO;AACjC,QAAIT,GAAGuB,KAAH,KAAa,CAAjB,EAAoB;AAChBvB,WAAGwB,cAAH;AACAhB,gBAAQC,GAAR,CAAY,eAAZ,EAFgB,CAEc;;AAE9B,YAAMgB,aAAanB,sBAAsBU,GAAtB,CAA0B;AAAA,mBAAS3D,MAAMtC,IAAf;AAAA,SAA1B,CAAnB;;AAEA;AACA,YAAI0G,WAAWtF,MAAX,KAAsB,CAA1B,EAA6B;AACzBqE,oBAAQC,GAAR,CAAY,gBAAZ,EADyB,CACM;AAC/B;AACA;AACA;AACA;;AAEAZ,4BAAgB6B,SAAhB,CAA0BpB,sBAAsB,CAAtB,CAA1B;;AAEA,gBAAMvB,YAAY,IAAI3B,SAAJ,CAAckD,sBAAsB,CAAtB,CAAd,CAAlB;AACA3E,qBAASyD,aAAT,CAAuB,qBAAvB,EAA8C3B,WAA9C,CAA0DsB,UAAUrD,IAApE;;AAGA,gBAAMiG,kBAAkB3B,GAAGC,MAAH,CAAUE,KAAV,CAAgBQ,KAAhB,CAAsB,GAAtB,CAAxB;AACAX,eAAGC,MAAH,CAAUE,KAAV,GAAkBwB,gBAAgB,CAAhB,CAAlB,CAdyB,CAca;AACtC3B,eAAGC,MAAH,CAAU2B,mBAAV,CAA8B,OAA9B,EAAuCrB,kBAAvC,EAA2D,IAA3D;AACAP,eAAGC,MAAH,CAAU2B,mBAAV,CAA8B,SAA9B,EAAyCN,gBAAzC,EAA2D,IAA3D;AACA3F,qBAASmE,cAAT,CAAwB,sBAAxB,EAAgDT,SAAhD,GAA4D,EAA5D;AACH;AACJ;AACJ;;AAED,IAAIwC,0BAA0B,KAA9B;;AAEA,SAASC,iBAAT,CAA2B9B,EAA3B,EAA+B;AAC3BQ,YAAQC,GAAR,CAAY,mBAAZ,EAD2B,CACO;AAClC,QAAMsB,UAAU/B,GAAGC,MAAH,CAAUE,KAAV,CAAgBQ,KAAhB,CAAsB,MAAtB,EAA8B,CAA9B,CAAhB;AACAH,YAAQC,GAAR,CAAYsB,OAAZ,EAH2B,CAGL;AACtB,QAAM3G,OAAOuB,OAAOoF,OAAP,EAAgB,kBAAhB,CAAb;AACAvB,YAAQC,GAAR,CAAYrF,KAAKgB,MAAL,CAAY,+BAAZ,CAAZ,EAL2B,CAKgC;AAC9D;;AAED,SAAS4F,eAAT,CAAyBhC,EAAzB,EAA6B;AACzBQ,YAAQC,GAAR,CAAY,iBAAZ,EADyB,CACO;AAChC,QAAIT,GAAGuB,KAAH,KAAa,CAAjB,EAAoB;AAChBvB,WAAGwB,cAAH;AACAhB,gBAAQC,GAAR,CAAY,eAAZ,EAFgB,CAEc;;AAE9B,YAAMsB,UAAU/B,GAAGC,MAAH,CAAUE,KAAV,CAAgBQ,KAAhB,CAAsB,MAAtB,EAA8B,CAA9B,CAAhB;AACA,YAAMvF,OAAOuB,OAAOoF,OAAP,EAAgB,kBAAhB,CAAb;AACA,YAAME,YAAY,IAAIjE,OAAO1D,KAAX,CAAiB,SAAjB,EAA4B,EAAEc,UAAF,EAAQD,MAAM,KAAd,EAA5B,CAAlB;AACA,YAAM+G,WAAW,IAAI1G,SAAJ,CAAcyG,SAAd,CAAjB;AACAtG,iBAASyD,aAAT,CAAuB,qBAAvB,EAA8C3B,WAA9C,CAA0DyE,SAASxG,IAAnE;AACAmE,wBAAgBsC,SAAhB,CAA0BF,SAA1B;;AAEA,YAAMN,kBAAkB3B,GAAGC,MAAH,CAAUE,KAAV,CAAgBQ,KAAhB,CAAsB,MAAtB,CAAxB;AACAX,WAAGC,MAAH,CAAUE,KAAV,GAAkBwB,gBAAgB,CAAhB,CAAlB,CAZgB,CAYsB;AACtC3B,WAAGC,MAAH,CAAUG,UAAV,CAAqBvE,SAArB,CAA+BuG,MAA/B,CAAsC,aAAtC;AACApC,WAAGC,MAAH,CAAU2B,mBAAV,CAA8B,OAA9B,EAAuCE,iBAAvC,EAA0D,IAA1D;AACA9B,WAAGC,MAAH,CAAU2B,mBAAV,CAA8B,SAA9B,EAAyCI,eAAzC,EAA0D,IAA1D;AACAH,kCAA0B,KAA1B;AACH;AACJ;;AAEDlG,SAASmE,cAAT,CAAwB,YAAxB,EAAsCV,aAAtC,CAAoD,UAApD,EAAgEiD,gBAAhE,CAAiF,SAAjF,EAA4F,UAACrC,EAAD,EAAQ;AAChG;AACA,QAAIA,GAAGsC,GAAH,KAAW,GAAf,EAAoB;AAChBtC,WAAGC,MAAH,CAAUoC,gBAAV,CAA2B,OAA3B,EAAoC9B,kBAApC,EAAwD,IAAxD;AACAP,WAAGC,MAAH,CAAUoC,gBAAV,CAA2B,SAA3B,EAAsCf,gBAAtC,EAAwD,IAAxD;AACH;;AAED;AACA,QAAItB,GAAGuB,KAAH,KAAa,CAAjB,EAAoB;AACpB;AACI,YAAIvB,GAAGC,MAAH,CAAUE,KAAV,CAAgBH,GAAGC,MAAH,CAAUE,KAAV,CAAgBhE,MAAhB,GAAyB,CAAzC,MAAgD,GAApD,EAAyD;AACrD6D,eAAGC,MAAH,CAAU2B,mBAAV,CAA8B,OAA9B,EAAuCrB,kBAAvC,EAA2D,IAA3D;AACAP,eAAGC,MAAH,CAAU2B,mBAAV,CAA8B,SAA9B,EAAyCN,gBAAzC,EAA2D,IAA3D;AACH;AACJ;;AAED;AACA,QAAItB,GAAGsC,GAAH,KAAW,GAAX,IAAkB,CAACT,uBAAvB,EAAgD;AAC5C,YAAMU,aAAavC,GAAGC,MAAH,CAAUE,KAAV,CAAgBhE,MAAnC;AACA,YAAI6D,GAAGC,MAAH,CAAUE,KAAV,CAAgBqC,SAAhB,CAA0BD,aAAa,CAAvC,EAA0CA,UAA1C,MAA0D,KAA9D,EAAqE;AACjEvC,eAAGC,MAAH,CAAUG,UAAV,CAAqBvE,SAArB,CAA+BC,GAA/B,CAAmC,aAAnC;AACAkE,eAAGC,MAAH,CAAUoC,gBAAV,CAA2B,OAA3B,EAAoCP,iBAApC,EAAuD,IAAvD;AACA9B,eAAGC,MAAH,CAAUoC,gBAAV,CAA2B,SAA3B,EAAsCL,eAAtC,EAAuD,IAAvD;AACAH,sCAA0B,IAA1B;AACH;AACJ;;AAED;AACA,QAAI7B,GAAGuB,KAAH,KAAa,CAAjB,EAAoB;AACpB;AACA;AACI,YAAIvB,GAAGC,MAAH,CAAUE,KAAV,CAAgBH,GAAGC,MAAH,CAAUE,KAAV,CAAgBhE,MAAhB,GAAyB,CAAzC,MAAgD,GAApD,EAAyD;AACrD6D,eAAGC,MAAH,CAAUG,UAAV,CAAqBvE,SAArB,CAA+BuG,MAA/B,CAAsC,aAAtC;AACApC,eAAGC,MAAH,CAAU2B,mBAAV,CAA8B,OAA9B,EAAuCE,iBAAvC,EAA0D,IAA1D;AACA9B,eAAGC,MAAH,CAAU2B,mBAAV,CAA8B,SAA9B,EAAyCI,eAAzC,EAA0D,IAA1D;AACAH,sCAA0B,KAA1B;AACH;AACJ;AACJ,CAtCD;AAuCA","file":"index.old.js","sourcesContent":["/* eslint-disable */\n\n/* eslint-env browser */\n/* globals moment */\n\n// function dragoverHandler(ev) {\n//     ev.preventDefault();\n//     ev.dataTransfer.dropEffect = \"copy\";\n// }\n\n// function dropHandler(ev) {\n//     ev.preventDefault();\n//     document.getElementById(ev.target.id).className = 'drop';\n//     let text = document.createTextNode(ev.dataTransfer.getData('text'));\n//     document.getElementById(ev.target.id).appendChild(text);\n//     if (ev.dataTransfer.getData('application/json')) {\n//         generateCard(ev.dataTransfer.getData('application/json'));\n//     }\n// }\n\n// function dragenterHandler(ev) {\n//     ev.preventDefault();\n//     document.getElementById(ev.target.id).className = 'dragenter';\n// }\n\n// function dragleaveHandler(ev) {\n//     document.getElementById(ev.target.id).className = '';\n// }\n\n\n// let dropzone = document.getElementById('dropzone');\n// console.log(dropzone);\n// dropzone.ondragover = dragoverHandler;\n// dropzone.ondrop = dropHandler;\n// dropzone.ondragenter = dragenterHandler;\n// dropzone.ondragleave = dragleaveHandler;\n\n// function dragstartHandler(ev) {\n//     console.log('gettin dragged');\n//     ev.dataTransfer.setData('text/plain', document.getElementById(ev.target.id).textContent);\n// }\n\n// let draggable = document.getElementById('draggable');\n// console.log(draggable);\n// draggable.ondragstart = dragstartHandler;\n\n// function handleCardDrag(ev) {\n//     let card = ev.target;\n//     let data = {\n//         text: '',\n//         badges: [],\n//         labels: []\n//     };\n//     for (let elem of card.children) {\n//         if (elem.classList.contains('text')) {\n//             data.text = elem.innerText;\n//         } else if (elem.classList.contains('badges')) {\n//             // TODO: convert badges into data-* attributes\n//             for (let badge of elem.children) {\n//                 data.badges.push({\n//                     type: badge.className,\n//                     content: badge.innerText\n//                 })\n//             }\n//         }\n//     }\n\n//     // TODO: make sure labels always get added to the data-labels attr\n//     if (card.dataset.labels) {\n//         data.labels = card.dataset.labels.split(' ');\n//     }\n\n//     ev.dataTransfer.setData('application/json', JSON.stringify(data));\n\n//     // TODO: add a plain text alternative\n// }\n\n\n/**\n * Badge class.\n */\nclass Badge {\n    /**\n     * Checklist structure:\n     * {\n     *   name: String,\n     *   items: [\n     *     {\n     *        text: String,\n     *        dueDate: Moment, (optional)\n     *        done: Boolean\n     *     }\n     *   ]\n     * }\n     *\n     * Due date structure:\n     * {\n     *   date: Moment,\n     *   done: Boolean\n     * }\n     * @param {*} type\n     * @param {*} data\n     */\n    constructor(type, data) {\n        if (this.validateType(type)) {\n            this._type = type;\n        }\n        else {\n            throw new Error('Invalid type passed to Badge constructor');\n        }\n        if (this.validateData(data)) {\n            this._data = data;\n        }\n        else {\n            throw new Error('Invalid data passed to Badge constructor');\n        }\n    }\n    validateData(dataObj) {\n        if (this.type === 'checklist') {\n            if (dataObj.name && dataObj.items) {\n                for (const item of dataObj.items) {\n                    if (!item.text && !(typeof item.done === 'boolean')) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        if (this.type === 'dueDate') {\n            return dataObj.date && (typeof dataObj.done === 'boolean');\n        }\n        // if not one of the specified types then invalid\n        return false;\n    }\n    validateType(typeStr) {\n        const validTypes = ['checklist', 'dueDate'];\n        return validTypes.includes(typeStr);\n    }\n    get type() {\n        return this._type;\n    }\n    set type(typeStr) {\n        if (this.validateType(typeStr)) {\n            this._type = typeStr;\n        }\n        else {\n            throw new Error('Invalid type passed to Badge type setter');\n        }\n    }\n    get data() {\n        return this._data;\n    }\n    // TODO: set character limit on content\n    set data(dataObj) {\n        if (this.validateData(dataObj)) {\n            this._data = dataObj;\n        }\n        else {\n            throw new Error('Invalid data passed to Badge data setter');\n        }\n    }\n}\n\nclass BadgeNode {\n    constructor(badge) {\n        this.node = document.createElement('span');\n        this.node.classList.add('badge');\n        this.node.dataset.badgeType = badge.type;\n\n        let badgeText = '';\n        if (badge.type === 'checklist') {\n            let i = 0;\n            for (const item of badge.data.items) {\n                if (item.done) i++;\n            }\n            badgeText = `${i}/${badge.data.items.length}`;\n        }\n        if (badge.type === 'dueDate') {\n            badgeText = badge.data.date.format('MMM Do');\n        }\n        this.node.innerText = badgeText;\n        this._badge = badge;\n    }\n    colorize() {\n        if (this._badge.type === 'checklist') {\n            let i = 0;\n            for (const item of this._badge.data.items) {\n                if (item.done) i++;\n            }\n            if (i === this._badge.data.items.length) {\n                this.node.classList.add('complete');\n            }\n            else if (i > (0.5 * this._badge.data.items.length)) {\n                this.node.classList.add('intermediate');\n            }\n            else {\n                this.node.classList.add('incomplete');\n            }\n        }\n        if (this._badge.type === 'dueDate') {\n            if (this._badge.data.done) {\n                this.node.classList.add('complete');\n            }\n            else {\n                const { date } = this._badge.data;\n                const oneDayBefore = date.clone().subtract(1, 'days');\n                const now = moment();\n                if (now.isBetween(oneDayBefore, date)) {\n                    this.node.classList.add('upcoming');\n                }\n                else if (now.isAfter(date)) {\n                    this.node.classList.add('passed');\n                }\n            }\n        }\n    }\n}\n\nclass Label {\n    constructor(name, color) {\n        this._name = name;\n        this._color = color;\n    }\n    get name() {\n        return this._name;\n    }\n    // TODO: set char limit on name\n    set name(nameStr) {\n        this._name = nameStr;\n    }\n    // TODO: are limits needed on colors?\n    get color() {\n        return this._color;\n    }\n    set color(colorStr) {\n        this._color = colorStr;\n    }\n}\n\nclass LabelNode {\n    constructor(label) {\n        this.node = document.createElement('span');\n        this.node.classList.add('label');\n        this.node.dataset.label = label.name;\n        this._label = label;\n    }\n}\n\n// Create label colors stylsheet\nconst labelsStyleElem = document.createElement('style');\ndocument.head.appendChild(labelsStyleElem);\nconst labelsStylesheet = labelsStyleElem.sheet;\n\n/**\n   * Adds a label to the label stylesheet.\n   * @param {Models.Label} label\n   */\n\nfunction registerLabel(label) {\n    const styleRule = `\n      .label[data-label=\"${label.name}\"] {\n          background-color: ${label.color};\n      }\n      `;\n    labelsStylesheet.insertRule(styleRule, 0);\n}\n\nconst defaultLabelsList = [\n    new Models.Label('enc1102', 'blue'),\n    new Models.Label('phy2049+l', 'orange'),\n    new Models.Label('chm2211+l', 'red'),\n    new Models.Label('ap gov', 'lightblue'),\n    new Models.Label('ap macro', 'lightgreen')\n];\n\ndefaultLabelsList.forEach(registerLabel);\n\nclass Card {\n    constructor(text, badges, labels) {\n        this._text = text || '';\n        this._badges = [].concat(badges || []);\n        this._labels = [].concat(labels || []);\n    }\n    get text() {\n        return this._text;\n    }\n    // TODO: set char limits on strings\n    set text(textStr) {\n        this._text = textStr;\n    }\n    get badges() {\n        return this._badges;\n    }\n    set badges(badgesList) {\n        this._badges = [].concat(badgesList || []);\n    }\n    addBadges(badgesList) {\n        this._badges = this._badges.concat(badgesList || []);\n    }\n    removeBadges(badgesList) { // eslint-disable-line no-unused-vars\n    // TODO: implement\n    }\n    get labels() {\n        return this._labels;\n    }\n    set labels(labelsList) {\n        this._labels = [].concat(labelsList || []);\n    }\n    // TODO: make sure duplicate labels don't get added\n    addLabels(labelsList) {\n        this._labels = this._labels.concat(labelsList || []);\n    }\n    removeLabels(labelsList) { // eslint-disable-line no-unused-vars\n    // TODO: implement\n    }\n    clear() {\n        this.text = '';\n        this.badges = [];\n        this.labels = [];\n    }\n}\n\n// TODO: add droppable & guid\nclass CardNode {\n    constructor(card) {\n        this.node = document.createElement('div');\n        this.node.classList.add('card');\n\n        const labelsCon = document.createElement('div');\n        labelsCon.classList.add('labels');\n\n        for (const label of card.labels) {\n            const labelNode = new LabelNode(label);\n            labelsCon.appendChild(labelNode.node);\n        }\n\n        this.node.appendChild(labelsCon);\n\n        this.node.appendChild(document.createTextNode(card.text));\n\n        const badgesCon = document.createElement('div');\n        badgesCon.classList.add('badges');\n\n        for (const badge of card.badges) {\n            const badgeNode = new BadgeNode(badge);\n            badgesCon.appendChild(badgeNode.node);\n        }\n\n        this.node.appendChild(badgesCon);\n        this._card = card;\n    }\n    colorizeBadges() {\n        const badgesCon = this.node.querySelector('.badges');\n        badgesCon.innerHTML = '';\n\n        for (const badge of this._card.badges) {\n            const badgeNode = new BadgeNode(badge);\n            badgeNode.colorize();\n            badgesCon.appendChild(badgeNode.node);\n        }\n    }\n}\n\nconst badge1 = new Models.Badge('dueDate', {\n    date: moment('09:30 a.m. 03-02-18', 'hh:mm a MM-DD-YY'),\n    done: false\n});\nconst badge2 = new Models.Badge('checklist', {\n    name: 'Assignments',\n    items: [{\n        text: 'Ch 1',\n        done: true\n    },\n    {\n        text: 'Ch 2',\n        done: true\n    },\n    {\n        text: 'Ch 3',\n        done: false\n    }]\n});\nconst label1 = new Models.Label('enc1102', 'blue');\nconst label2 = new Models.Label('phy2049+l', 'red');\nconst card = new Card('Jane Eyre', [badge1, badge2], [label1, label2]);\nconst cardNode = new CardNode(card);\ncardNode.colorizeBadges();\ndocument.querySelector('#cardlist').appendChild(cardNode.node);\n\nconst newCardTemplate = new Card();\n\ndocument.getElementById('newCardGen').querySelector('input[type=\"submit\"]').onclick = (ev) => {\n    newCardTemplate.text = ev.target.parentElement.querySelector('textarea').value;\n    // remove all labels, badges, and text\n    ev.target.parentNode.querySelector('.labels').innerHTML = '';\n    ev.target.parentNode.querySelector('.badges').innerHTML = '';\n    ev.target.parentNode.querySelector('textarea').value = '';\n\n    // TODO: colorize badges\n    document.querySelector('#cardlist').appendChild(new CardNode(newCardTemplate).node);\n    newCardTemplate.clear();\n};\n\nlet possibleMatchesGlobal = {};\n\nfunction handleLabelDisplay(ev) {\n    console.log('handleLabelDisplay'); // eslint-disable-line no-console\n    // handle label names\n    const labelName = ev.target.value.split('#')[1];\n    const possibleMatches = defaultLabelsList.filter((label) => {\n        const labelFrag = label.name.substr(0, labelName.length);\n        return labelFrag === labelName;\n    });\n    possibleMatchesGlobal = possibleMatches;\n    console.log(possibleMatches.map(match => match.name)); // eslint-disable-line no-console\n    const labelNodes = possibleMatches.map((label) => {\n        const node = document.createElement('div');\n        node.classList.add('possibleLabel');\n        node.innerText = label.name;\n        node.style.backgroundColor = label.color;\n        return node;\n    });\n    console.log(labelNodes); // eslint-disable-line no-console\n    const possibleLabelDisplay = document.querySelector('#possibleLabelDisplay');\n    possibleLabelDisplay.innerHTML = '';\n    labelNodes.forEach(labelNode => possibleLabelDisplay.appendChild(labelNode));\n}\n\nfunction handleLabelEntry(ev) {\n    console.log('handleLabelEntry'); // eslint-disable-line no-console\n    if (ev.which === 9) {\n        ev.preventDefault();\n        console.log('tab prevented'); // eslint-disable-line no-console\n\n        const labelNames = possibleMatchesGlobal.map(label => label.name);\n\n        // only handle tab if only one label is available\n        if (labelNames.length === 1) {\n            console.log('one label only'); // eslint-disable-line no-console\n            // const labelName = document.getElementById('possibleLabelDisplay').children[0].innerText;\n            // const labelNode = document.createElement('span');\n            // labelNode.classList = 'label';\n            // labelNode.dataset.label = labelName;\n\n            newCardTemplate.addLabels(possibleMatchesGlobal[0]);\n\n            const labelNode = new LabelNode(possibleMatchesGlobal[0]);\n            document.querySelector('#newCardGen .labels').appendChild(labelNode.node);\n\n\n            const textareaContent = ev.target.value.split('#');\n            ev.target.value = textareaContent[0]; // eslint-disable-line prefer-destructuring\n            ev.target.removeEventListener('keyup', handleLabelDisplay, true);\n            ev.target.removeEventListener('keydown', handleLabelEntry, true);\n            document.getElementById('possibleLabelDisplay').innerHTML = '';\n        }\n    }\n}\n\nlet currentlyProcessingDate = false;\n\nfunction handleDateDisplay(ev) {\n    console.log('handleDateDisplay'); // eslint-disable-line no-console\n    const dateStr = ev.target.value.split('due:')[1];\n    console.log(dateStr); // eslint-disable-line no-console\n    const date = moment(dateStr, 'hh:mm a MM-DD-YY');\n    console.log(date.format('dddd, MMMM Do YYYY, h:mm:ss a')); // eslint-disable-line no-console\n}\n\nfunction handleDateEntry(ev) {\n    console.log('handleDateEntry'); // eslint-disable-line no-console\n    if (ev.which === 9) {\n        ev.preventDefault();\n        console.log('tab prevented'); // eslint-disable-line no-console\n\n        const dateStr = ev.target.value.split('due:')[1];\n        const date = moment(dateStr, 'hh:mm a MM-DD-YY');\n        const dateBadge = new Models.Badge('dueDate', { date, done: false });\n        const dateNode = new BadgeNode(dateBadge);\n        document.querySelector('#newCardGen .badges').appendChild(dateNode.node);\n        newCardTemplate.addBadges(dateBadge);\n\n        const textareaContent = ev.target.value.split('due:');\n        ev.target.value = textareaContent[0]; // eslint-disable-line prefer-destructuring\n        ev.target.parentNode.classList.remove('dateDisplay');\n        ev.target.removeEventListener('keyup', handleDateDisplay, true);\n        ev.target.removeEventListener('keydown', handleDateEntry, true);\n        currentlyProcessingDate = false;\n    }\n}\n\ndocument.getElementById('newCardGen').querySelector('textarea').addEventListener('keydown', (ev) => {\n    // handle displaying labels on \"#\"\n    if (ev.key === '#') {\n        ev.target.addEventListener('keyup', handleLabelDisplay, true);\n        ev.target.addEventListener('keydown', handleLabelEntry, true);\n    }\n\n    // remove label display if # is removed\n    if (ev.which === 8) {\n    // only removes listeners if '#' is the last <textarea> character right before the deletion\n        if (ev.target.value[ev.target.value.length - 1] === '#') {\n            ev.target.removeEventListener('keyup', handleLabelDisplay, true);\n            ev.target.removeEventListener('keydown', handleLabelEntry, true);\n        }\n    }\n\n    // handle adding due date on \"due:\"\n    if (ev.key === ':' && !currentlyProcessingDate) {\n        const textLength = ev.target.value.length;\n        if (ev.target.value.substring(textLength - 3, textLength) === 'due') {\n            ev.target.parentNode.classList.add('dateDisplay');\n            ev.target.addEventListener('keyup', handleDateDisplay, true);\n            ev.target.addEventListener('keydown', handleDateEntry, true);\n            currentlyProcessingDate = true;\n        }\n    }\n\n    // remove due date display if :due is removed\n    if (ev.which === 8) {\n    // only removes listeners if ':' is the last <textarea> character right before the deletion\n    // TODO: don't remove listener until 'due:' is removed\n        if (ev.target.value[ev.target.value.length - 1] === ':') {\n            ev.target.parentNode.classList.remove('dateDisplay');\n            ev.target.removeEventListener('keyup', handleDateDisplay, true);\n            ev.target.removeEventListener('keydown', handleDateEntry, true);\n            currentlyProcessingDate = false;\n        }\n    }\n});\n/* eslint-enable */\n"]}