{"version":3,"sources":["models/Badge.js"],"names":["Badge","type","data","validateType","_type","Error","validateData","_data","dataObj","name","items","item","text","done","date","typeStr","validTypes","includes"],"mappings":";;;;IAAqBA,K;AACjB;;;;;;;;;;;;;;;;;;;;;AAqBA,mBAAYC,IAAZ,EAAkBC,IAAlB,EAAwB;AAAA;;AACpB,YAAI,KAAKC,YAAL,CAAkBF,IAAlB,CAAJ,EAA6B;AACzB,iBAAKG,KAAL,GAAaH,IAAb;AACH,SAFD,MAGK;AACD,kBAAM,IAAII,KAAJ,CAAU,4BAAV,CAAN;AACH;AACD,YAAI,KAAKC,YAAL,CAAkBJ,IAAlB,CAAJ,EAA6B;AACzB,iBAAKK,KAAL,GAAaL,IAAb;AACH,SAFD,MAGK;AACD,kBAAM,IAAIG,KAAJ,CAAU,4BAAV,CAAN;AACH;AACJ;AACD;;;;;qCACaG,O,EAAS;AAClB,gBAAI,KAAKP,IAAL,KAAc,WAAlB,EAA+B;AAC3B,oBAAIO,QAAQC,IAAR,IAAgBD,QAAQE,KAA5B,EAAmC;AAAA;AAAA;AAAA;;AAAA;AAC/B,6CAAmBF,QAAQE,KAA3B,8HAAkC;AAAA,gCAAvBC,IAAuB;;AAC9B,gCAAI,CAACA,KAAKC,IAAN,IAAc,EAAE,OAAOD,KAAKE,IAAZ,KAAqB,SAAvB,CAAlB,EAAqD;AACjD,uCAAO,KAAP;AACH;AACJ;AAL8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAM/B,2BAAO,IAAP;AACH;AACJ;AACD,gBAAI,KAAKZ,IAAL,KAAc,SAAlB,EAA6B;AACzB,uBAAOO,QAAQM,IAAR,IAAiB,OAAON,QAAQK,IAAf,KAAwB,SAAhD;AACH;AACD;AACA,mBAAO,KAAP;AACH;;;qCACYE,O,EAAS;AAClB,gBAAMC,aAAa,CAAC,WAAD,EAAc,SAAd,CAAnB;AACA,mBAAOA,WAAWC,QAAX,CAAoBF,OAApB,CAAP;AACH;;;4BACU;AACP,mBAAO,KAAKX,KAAZ;AACH,S;0BACQW,O,EAAS;AACd,gBAAI,KAAKZ,YAAL,CAAkBY,OAAlB,CAAJ,EAAgC;AAC5B,qBAAKX,KAAL,GAAaW,OAAb;AACH,aAFD,MAGK;AACD,sBAAM,IAAIV,KAAJ,CAAU,wBAAV,CAAN;AACH;AACJ;;;4BACU;AACP,mBAAO,KAAKE,KAAZ;AACH;AACD;;0BACSC,O,EAAS;AACd,gBAAI,KAAKF,YAAL,CAAkBE,OAAlB,CAAJ,EAAgC;AAC5B,qBAAKD,KAAL,GAAaC,OAAb;AACH,aAFD,MAGK;AACD,sBAAM,IAAIH,KAAJ,CAAU,wBAAV,CAAN;AACH;AACJ;;;;;;eAhFgBL,K","file":"Badge.js","sourcesContent":["export default class Badge {\n    /**\n     * Checklist structure:\n     * {\n     *   name: String,\n     *   items: [\n     *     {\n     *        text: String,\n     *        dueDate: Moment, (optional)\n     *        done: Boolean\n     *     }\n     *   ]\n     * }\n     *\n     * Due date structure:\n     * {\n     *   date: Moment,\n     *   done: Boolean\n     * }\n     * @param {*} type\n     * @param {*} data\n     */\n    constructor(type, data) {\n        if (this.validateType(type)) {\n            this._type = type;\n        }\n        else {\n            throw new Error('Invalid type for new Badge');\n        }\n        if (this.validateData(data)) {\n            this._data = data;\n        }\n        else {\n            throw new Error('Invalid data for new Badge');\n        }\n    }\n    // TODO: maybe a library should be used here\n    validateData(dataObj) {\n        if (this.type === 'checklist') {\n            if (dataObj.name && dataObj.items) {\n                for (const item of dataObj.items) {\n                    if (!item.text || !(typeof item.done === 'boolean')) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        if (this.type === 'dueDate') {\n            return dataObj.date && (typeof dataObj.done === 'boolean');\n        }\n        // if not one of the specified types then invalid\n        return false;\n    }\n    validateType(typeStr) {\n        const validTypes = ['checklist', 'dueDate'];\n        return validTypes.includes(typeStr);\n    }\n    get type() {\n        return this._type;\n    }\n    set type(typeStr) {\n        if (this.validateType(typeStr)) {\n            this._type = typeStr;\n        }\n        else {\n            throw new Error('Invalid type for Badge');\n        }\n    }\n    get data() {\n        return this._data;\n    }\n    // TODO: set character limit on content\n    set data(dataObj) {\n        if (this.validateData(dataObj)) {\n            this._data = dataObj;\n        }\n        else {\n            throw new Error('Invalid data for Badge');\n        }\n    }\n}\n"]}